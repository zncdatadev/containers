name: release

env:
  KUBEDOOP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0-dev' }}
  REGISTRY: quay.io/zncdatadev

on:
  push:
    branches:
      - ci/add-release
    tags:
      - '**'

jobs:
  products-shard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get products versions
        id: products-shard
        run: |
          # Get product names from project.yaml
          product_names=$(yq -o=json '.' project.yaml | jq -r '.products[]')

          # Get versions for each product and store structured information
          declare -a product_info=()
          for product_name in $product_names; do
            # Check if versions.yaml exists
            if [ ! -f "$product_name/versions.yaml" ]; then
              echo "Warning: $product_name/versions.yaml does not exist, skipping"
              continue
            fi

            # Get versions from the product directory
            versions_json=$(yq -o=json '.' "$product_name/versions.yaml" | jq -c '[.versions[].product]')
            # example output: ["3.3.4", "3.3.5"]
            echo "product '${product_name}' has versions: ${versions_json}"

            # Append structured product info to array
            for version in $(echo "${versions_json}" | jq -r '.[]'); do
              # Create JSON object with product_name and product_version fields
              product_info+=("{\"product_name\":\"${product_name}\",\"product_version\":\"${version}\"}")
            done
          done

          # Convert the array to a JSON string and set it as an output
          if [ ${#product_info[@]} -eq 0 ]; then
            echo "Error: No valid product versions found"
            exit 1
          fi

          product_info_json=$(printf '%s\n' "${product_info[@]}" | jq -sc '.')
          escaped_json=$(echo "$product_info_json" | jq -c -r @json)
          echo "product_info=${escaped_json:1:-1}" >> "$GITHUB_OUTPUT"
    outputs:
      product_info: ${{ steps.products-shard.outputs.product_info }}

  build:
    name: Build ${{ matrix.product.product_name }}-${{ matrix.product.product_version }}
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'zncdatadev' }}
    needs:
      - products-shard
    strategy:
      matrix:
        product: ${{fromJson(needs.products-shard.outputs.product_info)}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Run build
        uses: ./.github/actions/build-and-push
        with:
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ secrets.QUAY_USERNAME }}
          registry_password: ${{ secrets.QUAY_PASSWORD }}
          product_name: ${{ matrix.product.product_name }}
          product_version: ${{ matrix.product.product_version }}
          kubedoop_version: ${{ env.KUBEDOOP_VERSION }}
          push: ${{ github.event_name == 'push' }}
          sign: ${{ github.ref_type == 'tag' }}
